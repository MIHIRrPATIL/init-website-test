{
  "_id": "676bbeed90bf08ba5bd895fd",
  "layout": "post",
  "title": "Getting started with TensorFlow.js",
  "date": "2020-02-11T12:19:29.000Z",
  "summary": "Introduction to TensorFlow.js",
  "image": "https://res.cloudinary.com/dgbhomjud/image/upload/v1735114110/B9_ptijit.png",
  "mdcontent": "\n\nMachine Learning is a complex discipline but implementing machine program’s or models is far less daunting and difficult that’s due to various machine learning framework such as Google’s Tensorflow, pyTorch, Microsoft’s CNTX ,NEXT . Created By Google Brain team tensorflow is an open source library for ​ Numerical Computation and large scale Machine learning.\nIn Tensorflow all the computations involves tensors where tensors are the standard way of representing the data in machine learning or deep learning models.Tensor is a vector or matrix of n-Dimensions that represents the data type. All the operations are conducted inside a graph and a graph is a set of computation that take place successively .Each operation is called an open note and are connected to each other . TensorFlow allows the user to create data flow graph which describe how data moves through a graph and a series of processing nodes each node in the graph is represents mathematical operation and each connection is Multidimensional array or tensor.\n\n## What are Tensors?\nTensors are nothing but a de facto for representing the data in deep learning.\n\n<!-- ![png](https://github.com/djinit-ai/djinit-ai.github.io/blob/master/images/pic1_2020_02_11.png?raw=true) -->\n![Image of Yaktocat](https://miro.medium.com/max/848/1*kgzLawJmfp3i3UCG_KhfDA.png)\n\nDeep Learning in the image above, tensors are just multidimensional arrays, that allows you to represent data having higher dimensions. In general, Deep Learning you deal with high dimensional data sets where dimensions refer to different features present in the data set. In fact, the name “TensorFlow” has been derived from the operationswhich neural networks perform on tensors. It’s literally a flow of tensors. Since, you have understood what are tensors, let us move ahead in this TensorFlow tutorial and understand – what is TensorFlow?\n\n## What is TensorFlow?\n\nTensorFlow is a library based on Python that provides different types of functionality for\nimplementing Deep Learning Models. As discussed earlier, the term TensorFlow is\nmade up of two terms – Tensor & Flow:\n\n<!-- ![png](https://github.com/djinit-ai/djinit-ai.github.io/blob/master/images/pic2_2020_02_11.png?raw=true) -->\n\nIn TensorFlow, the term tensor refers to the representation of data as multi-dimensional array whereas the term flow refers to the series of operations that one performs on tensors as shown in the above image.\n\nNow we have covered enough background about TensorFlow.\n\nNext up, in this TensorFlow tutorial we will be discussing about TensorFlow code-basics.\n\n<!-- ![png](https://github.com/djinit-ai/djinit-ai.github.io/blob/master/images/pic3_2020_02_11.png?raw=true) -->\n\n## TensorFlow Technical Architecture:\n![Image of Yaktocat](https://data-flair.training/blogs/wp-content/uploads/sites/2/2018/05/Technical-Architecture.png)\n\n - Sources create Loaders for Servable Versions, then Loaders are sent as\nAspired Versions to the Manager, which loads and serves them to client\nrequests.\n - The Loader contains whatever metadata it needs to load the Servable.\n - The Source uses a callback to notify the manager of the Aspired Version.\n - The manager applies the configured Version Policy to determine the next\naction to take.\n - If the manager determines that it’s safe, it gives the Loader the required\nresources and tells the Loader to load the new version.\n - Clients ask the manager for the Servable, either specifying a version\nexplicitly or just requesting the latest version. The manager returns a handle\nfor the Servable. The Dynamic Manager applies the Version Policy and\ndecides to load the new version.\n - The Dynamic Manager tells the Loader that there is enough memory. The\nLoader instantiates the TensorFlow graph with the new weights.\n - A client requests a handle to the latest version of the model, and the\nDynamic Manager returns a handle to the new version of the Servable.\n\n## TENSORFLOW.JS\n\nOn Friday, 30 March 2018, the TensorFlow team announced the arrival of the\nmuch-awaited web version of the famous ML framework, TensorFlow.js. On which\ndevelopers can build lightweight models and directly run them on the browser without\nany hassle. ​ Tensorflow.js an open-source library you can use to define, train, and run\nmachine learning models entirely in the browser, using Javascript and a high-level\nlayers API.​ TensorFlow.js incudes ​ Keras A\nPI and exposes it as it’s ​ high-level API​ . This\nis very nice and it eases up the process of building machine learning and deep learning\nmodels. It also includes a ​ lower level API​ , previously called ​ deeplearn.js ​ , which can be\nused for linear algebra and automatic differentiation​ . ​ Eager execution is supported as\nwell. Underneath it all ​ TensorFlow.js is powered by ​ WebGL ​ , a ​ JavaScript API for\nrendering 2D and 3D graphics within any web browser without the plug-ins.\n\n<!-- ![png](https://github.com/djinit-ai/djinit-ai.github.io/blob/master/images/pic4_2020_02_11.png?raw=true) -->\n![Image of Yaktocat](https://miro.medium.com/max/3200/0*oY2OG7MFBN4eK1AN.)\n\n\n## What can you do with TensorFlow.js?\n\nIf you’re developing with TensorFlow.js, here are three workflows you can consider\n\n - **You can import an existing, pre-trained model for inference.** If you have an\nexisting TensorFlow or Keras model you’ve previously trained offline, you can\nconvert into TensorFlow.js format, and load it into the browser for inference.\n - **You can re-train an imported model.** You can use transfer learning to augment\nan existing model trained offline using a small amount of data collected in the\nbrowser using a technique called Image Retraining. This is one way to train an\naccurate model quickly, using only a small amount of data.\n - **Author models directly in browser. ​** ​ You can also use TensorFlow.js to define,\ntrain, and run models entirely in the browser using Javascript and a high-level\nlayers API.\n\n## Installation:\nHere’s how to install Tensoflow.js for the client side. There is also a\nserver-side version that runs on Node.js, but we won’t be using that in the tutorial:\n\n```\nnpm install @tensorflow/tfjs ​\n```\n\n``` JavaScript\n<script src = \"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@0.13.3/dist/tf.min.js\"> </script>\n```\n## Building a Linear Regresion Model in TensorFlow.js\n\n## What is Linear Regresion?\n\n**Linear regression** is a ​ linear approach to modeling the relationship between a scalar\nresponse (or dependent variable) and one or more explanatory variables (or\nindependent variables). The case of one explanatory variable is called simple ​ linear\nregression​ .\n\nLets Move on to implementing our model in tensorflow.js:  \n - **Initialize training data in tensors:**\n ```JavaScript\n  const ys = tf.tensor1d([2, 2, 4, 3, 4.5, 4.5, 7, 10]);\n  const xs = tf.tensor1d([1, 2, 3, 4, 5, 6, 7, 8]);\n```\n - **Initialize the beginning variables for the model:**\n Unlike tensors, variables can be changed. We need to initialize the parameters of\nthe model with some values, to give gradient descent something to tweak:\n```JavaScript\nlet m = tf.scalar(Math.random()).variable();\nlet b = tf.scalar(Math.random()).variable();\n```\n - **Define the Model :**\n For Our Model, we use simply y = mx + b,\n\n ```JavaScript\n  const model = x =>m.mul(x).add(b);\n ```\n - **Make the optimizer.:**\n This one is a stochastic gradient optimizer, which means\n that our results will vary slightly each time we run this script. The upside of using\n the stochastic approach is that it’s faster.\n ```JavaScript\n  const learningRate = 0.01;\n  const optimizer = tf.train.sgd(learningRate);\n ```\n - **Define a loss function:**\n Mean Squared Error:\n ```JavaScript\n const loss = (pred, actual) =>\n pred.sub(actual).square().mean();\n ```\n - **Train the model:**\nWith each loop, the model variables are adjusted to minimize\nthe output of the loss function:\n\n```JavaScript\n  for (let i = 0; i < 10; ++i) {\n  optimizer.minimize(() => loss(model(xs), ys));\n  }\n```\n- **Use the model to predict outcomes. We can get predictions for a single\nvalue, or an array of values:**\n\n```JavaScript\n  const singlePrediction = model(2.3).dataSync();\n//predicted result: 2.508747100830078\n  const arrayPrediction = model([2.3, 11, 100]).dataSync();\n// predicted result: [2.508747100830078, 10.984630584716797,97.69194030761719]\n```\n![png](https://github.com/djinit-ai/djinit-ai.github.io/blob/master/images/result1.png)\nAnd that’s it! Below is a similar graph of the data used to train the model and a line\nrepresenting our model’s predictions at each value for x. Use the p5.js library to\nimplement this visualization of our model in the browser.\n\n## Building an Image Classification Model in your Browser using a Webcam\n\n - Open a text editor of your choice and create a file index.html.​ Save the following\ncode in this file:\n\n```\n<​ meta​ ​ http-equiv​ = ​ \"X-UA-Compatible\"​ ​ content​ = ​ \"IE=edge\"​ >\n<​ meta​ ​ name​ = ​ \"viewport\"​ ​ content​ = ​ \"width=device-width,\ninitial-scale=1\"​ >\n<!-- title of the page -->\n<​ title​ >image_classification</​ title​ >\n<!-- load processing library-->\n<​ script\nsrc​ = ​ \"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.8.0/p5.min.js\"​ ></​ s\ncript​ >\n<​ script\nsrc​ = ​ \"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.8.0/addons/p5.dom.\nmin.js\"​ ></​ script​ >\n<!-- load ml5.js --><​ script\nsrc​ = ​ \"https://unpkg.com/ml5@0.1.1/dist/ml5.min.js\"​ ></​ script​ >\n<!-- load index.js -->\n<​ script​ ​ src​ = ​ \"index.js\"​ ></​ script​ >\n</​ head​ >\n<​ body​ >\n<!-- this is where the video will be shown -->\n<​ video​ ​ id​ = ​ \"video\"​ ></​ video​ >\n</​ body​ >\n</​ html​ >\n```\n - **Next, create another file ​index.js and write the following code in it**\n\n ```JavaScript\nlet​ mobilenet;\nlet​ video;\nlet​ label ​ = ​ ​ ''​ ;\n// when model is ready make predictions\nfunction​ ​ modelReady​ () {\nconsole​ . ​ log​ ( ​ 'Model is ready!!!'​ );\nmobilenet.​ predict​ (gotResults);\n}\nfunction​ ​ gotResults​ (error, results) {\nif​ (error) {\nconsole​ . ​ error​ (error);\n} ​ else​ {label ​ = ​ results[​ 0 ​ ].​ className​ ;\n// loop the inference by calling itself\nmobilenet.​ predict​ (gotResults);\n}\n}\n// setup function\nfunction​ ​ setup​ () {\ncreateCanvas​ ( ​ 640​ , ​ 550​ );\n// ml5 to create video capture\nvideo ​ = ​ ​ createCapture​ ( ​ VIDEO​ );\nvideo.​ hide​ ();\nbackground​ ( ​ 0 ​ );\n// load the MobileNet and apply it on video feed\nmobilenet ​ = ​ ml5.​ imageClassifier​ ( ​ 'MobileNet'​ , video,\nmodelReady);\n}\nfunction​ ​ draw​ () {\nbackground​ ( ​ 0 ​ );\n// show video\nimage​ (video, ​ 0 ​ , ​ 0 ​ );\nfill​ ( ​ 255​ );\ntextSize​ ( ​ 32​ );\n// show prediction label\ntext​ (label, ​ 10​ , height ​ - ​ ​ 20​ );}\n```\nSave both the files and open your ​ index.html ​ file in a browser like Google Chrome\nor Mozilla Firefox. That’s it! You have now created an app that can classify\nimages in real-time using your webcam in the browser itself! Here is how it looks.\n\n![png](https://github.com/djinit-ai/djinit-ai.github.io/blob/master/images/result2.png)\n - In the above example, we used a pre-trained image classification model called\nMobileNet\n - We used ​ ml5.js​ , a library built on top of TensorFlow.js, to load the MobileNet\nmodel into our browser and perform inference on the video feed\n - We also leveraged the ​ P5.js library to process the video feed and display labels\non the video itself"
}
